<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/ext/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/app/base.css' rel='stylesheet' />
</head>

<body id='view'>

<div id='data' class='column ui'>
<%= _(library).map(this.source).join('\n') %>
</div>

<div id='menu' class='column ui'>
  <nav><!--
    --><a href='#menu-util' class='minor'>⚙</a><!--
    --><a href='#menu-layers' class='major active'>Layers</a>
  </nav>
  <div id='menu-layers' class='active'>
    <%= _(sources).map(this.source).join('\n') %>
  </div>
  <div id='menu-util'>
    <h3>Project</h3>
    <a href='#settings'>Settings</a>
    <a href='#export'>Export</a>
    <a href='#upload'>Upload</a>
    <a href='#interaction'>Interaction</a>
    <h3>TileMill</h3>
    <a href='/projects'>Recent projects</a>
    <a href='/library'>Data library</a>
    <a href='/preferences'>Preferences</a>
  </div>
  <a href='#data' class='button data n'>✚ Layers</a>
  <a href='#menu' class='button data y'>✕ Layers</a>
</div>

<div id='full' class='column'>
  <div id='title' class='ui'>
    <div class='left'>
      <a class='button menu n icon' href='#menu'>☰</a>
      <a class='button menu y icon' href='#'>✕</a>
      <% if (project._tmp) { %>
        <a class='button' href='#saveas'>✔ Save as</a>
      <% } else { %>
        <a class='button save' href='#'>✔ Save</a>
      <% } %>
    </div>
    <div class='right'>
      <a class='button full n icon' href='#full'>⇆</a>
      <a class='button full y icon' href='#'>✕</a>
    </div>
    <%= project.name || 'Untitled' %>
  </div>
  <div id='map'></div>
</div>

<div id='docs' class='column ui'>
  <%= this['projectCartoRef'](cartoRef) %>
</div>

<div id='code' class='column'>
  <div class='left'>
    <a class='button docs n icon' href='#docs'>{}</a>
    <a class='button docs y icon' href='#'>✕</a>
  </div>
  <nav id='tabs'><!--
    <% _(project.styles).keys().forEach(function(k,i) { %>
    --><a rel='<%=k%>' href='#code-<%=k.replace(/[^\w+]/g,'_')%>' class='tab <%=!i?'active':''%>'><%=k%> <span class='delete'>✕</span></a><!--
    <% }); %>
  --></nav>
</div>

<% if (project._tmp) { %>
<div id='saveas' class='modal ui'>
  <a class='button icon close' href='#'>✕</a>
  <input type='text' placeholder='/path/to/project.tm2' size='25' id='saveas-filepath'/>
  <a href='#' class='saveas button'>✔ Save</a>
</div>
<% } %>

<div id='mask'></div>

<script src='/ext/underscore-min.js'></script>
<script src='/ext/codemirror.js'></script>
<script src='/ext/zepto.js'></script>
<script src='/ext/backbone.js'></script>
<script src='/ext/mapbox.js'></script>
<script src='/app/lib.js'></script>
<script src='/app/codemirror.carto.js'></script>
<script src='/app/codemirror.carto.complete.js'></script>
<script>
var map = mapbox.map('map', mapbox.layer().tilejson({ tiles:['/project/{z}/{x}/{y}.png?id=<%=project.id%>&mtime=<%=project.mtime%>'] }));
map.centerzoom({lon:<%=project.center[0]%>,lat:<%=project.center[1]%>},<%=project.center[2]%>);
map.setZoomRange(<%=project.minzoom%>,<%=project.maxzoom%>);
map.ui.zoombox.add();
map.ui.zoomer.add();

var code = _(<%=JSON.stringify(project.styles)%>).reduce(function(memo, value, k) {
  memo[k] = CodeMirror(document.getElementById('code'), {
    value: value,
    lineNumbers: true,
    mode: {
      name: 'carto',
      reference: window.cartoRef
    }
  });
  var completer = cartoCompletion(memo[k], window.cartoRef);

  /*
  @TODO
  function updateSelectors(model) {
      var ids = _.map(model.get('Layer').pluck('id'),
          function(x) { return '#' + x; });
      var classes = _(model.get('Layer').pluck('class')).chain().map(
          function(c) {
              if (c == undefined) return '';
              var cs = c.split(' ');
              if (cs[0] == '') return '';
              return _.map(cs, function(x) { return '.' + x; });
          }).flatten().compact().value();
      cartoCompleter.ids(ids);
      cartoCompleter.classes(classes);
  }
  this.model.bind('change', updateSelectors);
  updateSelectors(this.model);
  */

  memo[k].setOption('onKeyEvent', completer.onKeyEvent);
  memo[k].setOption('onHighlightComplete', _(completer.setTitles).throttle(100));
  memo[k].getWrapperElement().id = 'code-' + k.replace(/[^\w+]/g,'_');
  return memo;
}, {});
_(code).toArray().shift().getWrapperElement().className += ' active';

var Project = Backbone.Model.extend({});
Project.prototype.url = function() {
  return '/project?id=' + this.get('id');
};

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click a.button.save': 'save',
  'click a.button.saveas': 'saveas',
  'click #tabs a.tab span.delete': 'deltab',
  'click #tabs a.tab': 'tabbed',
  'click #docs nav a': 'tabbed',
  'click #menu nav a': 'tabbed',
  'click #menu-layers a': 'tabbed',
  'click #menu-layers a .moreless': 'moreless',
  'click #data section': 'data',
  'click #menu-layers a.delete': 'data',
  'keydown': 'keys'
};
Editor.prototype.keys = function(ev) {
  if ((!ev.ctrlKey && !ev.metaKey) || ev.altKey || ev.shiftKey) return;
  switch (ev.which) {
  case 83: // s
    this.save();
    break;
  case 187: // +
    map.zoomBy(1);
    break;
  case 189: // -
    map.zoomBy(-1);
    break;
  case 72: // h
    map.panBy(64, 0);
    break;
  case 74: // j
    map.panBy(0, -64);
    break;
  case 75: // k
    map.panBy(0, 64);
    break;
  case 76: // l
    map.panBy(-64, 0);
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.tabbed = function(ev) {
  var target = ev.currentTarget.href.split('#').pop();
  var context = target.split('-').slice(0,-1).join('-');
  $('#' + context + ' .active').removeClass('active');
  //$(ev.currentTarget).siblings().removeClass('active');
  $(ev.currentTarget).addClass('active');
  $('#' + target).addClass('active');
  return false;
};
Editor.prototype.moreless = function(ev) {
  var parent = $(ev.currentTarget).parent();
  parent.toggleClass('more');
  return false;
};
Editor.prototype.data = function(ev) {
  var target = $(ev.currentTarget).parent();
  if (target.parents('#menu-layers').size()) {
    target.prependTo($('#data'));
  } else {
    target.prependTo($('#menu-layers'));
  }
  return false;
};
Editor.prototype.deltab = function(ev) {
  var styles = this.model.get('styles');
  var parent = $(ev.currentTarget).parent();
  var target = parent.attr('rel');
  if (!styles[target]) return false;
  if (confirm('Remove stylesheet "' + target + '"?')) {
    $(code[target].getWrapperElement()).remove();
    parent.remove();
    delete styles[target];
    delete code[target];
    this.model.set({styles:styles});
    // Set first tab to active.
    if (parent.is('.active') && $('a.tab').size())
        this.tab({ currentTarget:$('a.tab').get(0) });
  }
  return false;
};
Editor.prototype.save = function(ev, options) {
  var attr = {};
  attr.styles = _(code).reduce(function(memo, cm, k) {
    memo[k] = cm.getValue();
    return memo;
  }, {});
  attr.sources = $('#menu-layers div.source').map(function() {
    return $(this).attr('id').split('source-').pop();
  });

  if (this.model.get('_prefs').saveCenter)
    attr.center = [ map.center().lon, map.center().lat, map.zoom() ];

  options = options || { success:_(this.refresh).bind(this) };
  this.model.save(attr, options);
};
Editor.prototype.saveas = function(ev) {
  var id = $('#saveas-filepath').val();
  this.model.set({id:id});
  this.save(null, {success:function() {
    window.location = '/project?id=' + id;
  }});
};
Editor.prototype.refresh = function(ev) {
  map.removeLayerAt(0);
  map.addLayer(mapbox.layer().tilejson({ tiles:['/project/{z}/{x}/{y}.png?id=<%=project.id%>&mtime=' + this.model.get('mtime') ] }));
  return false;
};

new Editor({
  el: document.body,
  model: new Project(<%= JSON.stringify(project) %>)
});
</script>
</body>

</html>
