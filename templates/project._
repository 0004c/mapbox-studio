<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/ext/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/app/base.css' rel='stylesheet' />
  <title><%= project.name %></title>
</head>

<body id='view' class='dark'>

<div id='data' class='column pane todo'>
  <a class='button icon close' href='#layers'></a>
  <section>
    <h2>Data library</h2>
  </section>
  <%= _(library).map(this.source).join('\n') %>
</div>

<form id='settings' class='column pane util'>
  <a class='button icon close' href='#util'></a>
  <section>
    <h2>Settings</h2>
  </section>
  <section>
    <label class='inline'>Name</label>
    <input class='stretch' name='name' type='text' value='<%= _(project.name).escape() %>'/>
  </section>
  <section>
    <label class='inline'>Description</label>
    <textarea class='stretch' name='description' type='text' cols='60' rows='8'><%= project.description %></textarea>
  </section>
  <section>
    <label class='inline'>Attribution</label>
    <input class='stretch' name='attribution' type='text' value='<%= _(project.attribution).escape() %>'></textarea>
  </section>
  <section>
    <label class='inline'>Minzoom</label>
    <input id='minzoom' name='minzoom' class='min' type='range' value='<%= project.minzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "max", "#maxzoom");' />
    <label class='range' id='minzoom-val'><%= project.minzoom %></label>
  </section>
  <section>
    <label class='inline'>Maxzoom</label>
    <input id='maxzoom' name='maxzoom' class='max' type='range' value='<%= project.maxzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "min", "#minzoom");' />
    <label class='range' id='maxzoom-val'><%= project.maxzoom %></label>
  </section>
  <section>
    <label class='inline'>Scale</label>
    <input id='scale' name='scale' type='range' value='<%= project.scale %>' min='1' max='4' step='1' onchange='rangeHandler(this, "scale", "#scale");' />
    <label class='range' id='scale-val'><%= project.scale %></label>
  </section>
  <section>
    <input type='submit' value='Save' class='wide' />
  </section>
</form>
<div id='export' class='column pane util'>
  <a class='button icon close' href='#util'></a>
  <section>
    <h2>Export</h2>
  </section>
  <section>
    <label class='inline'>Style</label>
    <code><a class='icon padded file' href='/project.xml?id=<%=project.id%>' target='_blank'>project.xml</a></code>
  </section>
  <section>
    <label class='inline'>Datasource</label>
    <code><a class='icon padded file' href='/source.xml?id=<%=project.sources[0]%>' target='_blank'>data.xml</a></code>
  </section>
  <section>
    <input type='button' value='Save XML' class='wide bake' />
    <small>Write style and datasource XML files to project</small>
  </section>
</div>
<div id='interaction' class='column pane util'>
  <a class='button icon close' href='#util'></a>
</div>

<div id='layers' class='menu column ui'>
  <nav>
    <a href='#' class='button icon close pinned'></a>
    <a href='#data' class='button data-n icon plus'>Data</a>
    <a href='#layers' class='button data-y icon close'>Data</a>
  </nav>
  <%= _(sources).map(this.source).join('\n') %>
</div>

<div id='util' class='menu column ui'>
  <nav>
    <a href='#' class='button icon close pinned'></a>
    <h3>Project</h3>
  </nav>
  <a class='icon padded conf' href='#settings'>Settings</a>
  <a class='icon padded export' href='#export'>Export</a>
  <a class='icon padded tooltip'>Interaction</a>
  <div class='centered'>
    <a class='icon padded grid button' href='/'>Recent projects</a>
  </div>
</div>

<div id='full' class='column'>
  <div id='title' class='ui'>
    <div class='left'>
      <span class='joined'>
        <a class='button icon conf' href='#util'></a><!--
        --><a class='button icon layers' href='#layers'></a><!--
      <% if (project._tmp) { %>
        --><a class='button icon okay' href='#saveas'>Save as</a>
      <% } else { %>
        --><a class='button icon okay save' href='#'>Save</a>
      <% } %>
      </span>
    </div>
    <div class='right'>
      <a class='button full-n icon full' href='#full'></a>
      <a class='button full-y icon close' href='#'></a>
    </div>
    <h3><%= project.name || 'Untitled' %></h3>
  </div>
  <div id='map' style='background-color:<%=project.background%>;'></div>
  <div id='map-overlay'></div>
  <div id='zoomedto' class='ui'><%= project.center[2] %></div>
</div>

<div id='docs' class='column'>
  <%= this['projectCartoRef'](cartoRef) %>
</div>

<div id='code' class='column'>
  <div class='left'>
    <a class='button docs-n icon code' href='#docs'></a>
    <a class='button docs-y icon close' href='#'></a>
  </div>
  <nav id='tabs'><!--
    <% _(project.styles).keys().forEach(function(k,i) { %>
    --><a rel='<%=k%>' href='#code-<%=k.replace(/[^\w+]/g,'_')%>' class='tab <%=!i?'active':''%>'><%=k%> <span class='icon close delete'></span></a><!--
    <% }); %>
  --></nav>
  <div class='right'>
    <a class='button icon plus' href='#addtab'></a>
  </div>
</div>

<% if (project._tmp) { %>
<form id='saveas' class='modal browse ui'>
  <a class='button icon close' href='#'></a>
  <div class='cwd'>
    <a href='#<%= browse.cwd.split('/').slice(0,-1).join('/') %>' class='button icon prev'></a>
    <strong><%= browse.cwd %></strong>
  </div>
  <div class='dir'>
    <% _(browse.dir).each(function(file) { %>
    <a class='icon folder padded' href='#<%=file.path%>'><%=file.basename%></a>
    <% }); %>
  </div>
  <div class='field centered'>
    <input type='text' placeholder='project.tm2' size='20' id='saveas-filepath' data-cwd='<%= browse.cwd %>' pattern='\w+\.tm2'/>
    <input type='submit' value='Save'/>
  </div>
</form>
<% } %>

<div id='error' class='modal ui centered'>
  <a class='button icon close' href='#'></a>
  <div class='message'></div>
</div>

<form id='addtab' class='modal ui centered'>
  <a class='button icon close' href='#'></a>
  <input type='text' placeholder='filename.mss' size='20' id='addtab-filename' pattern='\w+\.mss'/>
  <input type='submit' value='New tab'/>
</form>

<div id='mask'></div>

<script src='/ext/underscore-min.js'></script>
<script src='/ext/codemirror.js'></script>
<script src='/ext/codemirror.runmode.js'></script>
<script src='/ext/zepto.js'></script>
<script src='/ext/backbone.js'></script>
<script src='/ext/mapbox.js'></script>
<script src='/app/lib.js'></script>
<script src='/app/codemirror.carto.js'></script>
<script src='/app/codemirror.carto.complete.js'></script>
<script>
var rangeHandler = function(el, bound, target) {
  var limit = parseInt($(target).val(),10);
  if (bound === 'max') {
    el.value = parseInt(el.value, 10) < limit ? el.value : limit;
  } else {
    el.value = parseInt(el.value, 10) > limit ? el.value : limit;
  }
  $('#' + el.id + '-val').text(el.value);
};

var map = mapbox.map('map', mapbox.layer().tilejson({ tiles:['/project/{z}/{x}/{y}.png?id=<%=project.id%>&mtime=<%=project.mtime%>'] }));
map.centerzoom({lon:<%=project.center[0]%>,lat:<%=project.center[1]%>},<%=project.center[2]%>);
map.setZoomRange(<%=project.minzoom%>,<%=project.maxzoom%>);
map.ui.zoombox.add();
map.ui.zoomer.add();
map.ui.zoomer.appendTo($('#full').get(0));
map.addCallback('zoomed', function() { $('#zoomedto').text(map.zoom()|0); });
map.addCallback('extentset', function() { $('#zoomedto').text(map.zoom()|0); });

var Tab = function(id, value) {
  var tab = CodeMirror(document.getElementById('code'), {
    value: value,
    lineNumbers: true,
    mode: {
      name: 'carto',
      reference: window.cartoRef
    }
  });
  var completer = cartoCompletion(tab, window.cartoRef);

  /*
  @TODO
  function updateSelectors(model) {
      var ids = _.map(model.get('Layer').pluck('id'),
          function(x) { return '#' + x; });
      var classes = _(model.get('Layer').pluck('class')).chain().map(
          function(c) {
              if (c == undefined) return '';
              var cs = c.split(' ');
              if (cs[0] == '') return '';
              return _.map(cs, function(x) { return '.' + x; });
          }).flatten().compact().value();
      cartoCompleter.ids(ids);
      cartoCompleter.classes(classes);
  }
  this.model.bind('change', updateSelectors);
  updateSelectors(this.model);
  */

  tab.setOption('onKeyEvent', completer.onKeyEvent);
  tab.setOption('onHighlightComplete', _(completer.setTitles).throttle(100));
  tab.getWrapperElement().id = 'code-' + id.replace(/[^\w+]/g,'_');
  return tab;
};
var code = _(<%=JSON.stringify(project.styles)%>).reduce(function(memo, value, k) {
  memo[k] = Tab(k, value);
  return memo;
}, {});
_(code).toArray().shift().getWrapperElement().className += ' active';

var Project = Backbone.Model.extend({});
Project.prototype.url = function() {
  return '/project?id=' + this.get('id');
};

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click a.button.save': 'save',
  'click a.button.recache': 'recache',
  'click input.bake': 'bake',
  'submit #settings': 'save',
  'submit #saveas': 'saveas',
  'submit #addtab': 'addtab',
  'click #tabs a.tab span.delete': 'deltab',
  'click #tabs a.tab': 'tabbed',
  'click #docs nav a': 'tabbed',
  'click #menu nav a': 'tabbed',
  'click #layers a': 'tabbed',
  'click #layers a .moreless': 'moreless',
  'click #data a.section': 'data',
  'click #layers a.delete': 'data',
  'click .browse .cwd a': 'browse',
  'click .browse .dir a': 'browse',
  'keydown': 'keys'
};
Editor.prototype.keys = function(ev) {
  // Escape. Collapses windows, dialogs, modals, etc.
  if (ev.which === 27) {
    window.location.href = '#';
  }
  if ((!ev.ctrlKey && !ev.metaKey) || ev.altKey || ev.shiftKey) return;
  switch (ev.which) {
  case 83: // s
    this.save();
    break;
  case 187: // +
    map.zoomBy(1);
    break;
  case 189: // -
    map.zoomBy(-1);
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.tabbed = function(ev) {
  var target = ev.currentTarget.href.split('#').pop();
  var context = target.split('-').slice(0,-1).join('-');
  $('#' + context + ' .active').removeClass('active');
  //$(ev.currentTarget).siblings().removeClass('active');
  $(ev.currentTarget).addClass('active');
  $('#' + target).addClass('active');
  return false;
};
Editor.prototype.moreless = function(ev) {
  var parent = $(ev.currentTarget).parent();
  parent.toggleClass('more');
  return false;
};
Editor.prototype.data = function(ev) {
  var target = $(ev.currentTarget).parent();
  if (target.parents('#layers').size()) {
    target.appendTo($('#data'));
  } else {
    // Remove all other layers as we don't support compositing for now.
    $('#layers > div.source').each(function() {
      $(this).appendTo('#data');
    });
    target.appendTo($('#layers'));
  }
  return false;
};
Editor.prototype.addtab = function(ev) {
  var filename = $('#addtab-filename').val();
  if (!code[filename]) {
    $("<a rel='"+filename+"' href='#code-"+filename.replace(/[^\w+]/g,'_')+"' class='tab'>"+filename+" <span class='icon close delete'></span></a>").appendTo('nav#tabs');
    code[filename] = Tab(filename, '');
  }
  window.location.hash = '#';
  return false;
};
Editor.prototype.deltab = function(ev) {
  var styles = this.model.get('styles');
  var parent = $(ev.currentTarget).parent();
  var target = parent.attr('rel');
  if (!styles[target]) return false;
  if (confirm('Remove stylesheet "' + target + '"?')) {
    $(code[target].getWrapperElement()).remove();
    parent.remove();
    delete styles[target];
    delete code[target];
    this.model.set({styles:styles});
    // Set first tab to active.
    if (parent.is('.active') && $('a.tab').size())
      this.tab({ currentTarget:$('a.tab').get(0) });
  }
  return false;
};
Editor.prototype.recache = function(ev) {
  this.model.set({_recache:true});
  this.save(ev);
  return false;
};
Editor.prototype.bake = function(ev) {
  this.model.set({_bake:true});
  this.save(ev);
  return false;
};
Editor.prototype.save = function(ev, options) {
  // Set map in loading state.
  $('#full').addClass('loading');

  var attr = {};
  // Grab settings form values.
  _($('#settings').serializeArray()).reduce(function(memo, field) {
    if (field.name === 'minzoom' || field.name === 'maxzoom' || field.name === 'scale') {
      memo[field.name] = parseInt(field.value,10);
    } else if (field.name && field.value) {
      memo[field.name] = field.value;
    }
    return memo;
  }, attr);
  // Grab styles, sources.
  attr.styles = _(code).reduce(function(memo, cm, k) {
    memo[k] = cm.getValue();
    return memo;
  }, {});
  attr.sources = $('#layers div.source').map(function() {
    return $(this).attr('id').split('source-').pop();
  });

  if (this.model.get('_prefs').saveCenter) {
    var lon = map.center().lon % 360;
    lon += (lon < -180) ? 360 : (lon > 180) ? -360 : 0;
    attr.center = [lon , map.center().lat, map.zoom() ];
  }

  options = options || {
    success:_(this.refresh).bind(this),
    error: _(this.error).bind(this)
  };
  this.model.save(attr, options);

  // Back out of any panes that save the project.
  if (['#settings', '#export'].indexOf(window.location.hash) >= 0) window.location.hash = '#menu';

  return false;
};
Editor.prototype.error = function(model, resp) {
  this.errorClear();

  if (!resp.responseText)
    return this.errorModal('Could not save project "' + model.id + '"');

    // Assume carto.js specific error array format response.
  _(JSON.parse(resp.responseText).message.toString().split('\n')).chain()
    .compact()
    .map(function(e) { return e.match(/^(Error: )?([\w.]+):([\d]+):([\d]+) (.*)$/) || e; })
    .each(_(function(e) {
      if (_(e).isArray()) {
        var id = e[2];
        var ln = parseInt(e[3]) - 1;
        code[id]._cartoErrors = code[id]._cartoErrors || [];
        code[id]._cartoErrors.push(ln);
        code[id].setMarker(ln, "<a id='error-"+ln+"' href='#error-"+ln+"'>%N%</a><span class='message'><a href='#' class='icon'>✕</a>"+e[5]+"</span>", 'error');
      } else {
        return this.errorModal(e);
      }
    }).bind(this));
};
Editor.prototype.errorModal = function(text) {
  $('#error .message').text(text);
  window.location.hash = '#error';
};
Editor.prototype.errorClear = function() {
  $('#error .message').text('');
  $('#full').removeClass('loading');
  _(code).each(function(cm) {
    _(cm._cartoErrors||[]).each(cm.clearMarker);
    delete cm._cartoErrors;
  });
};
Editor.prototype.saveas = function(ev) {
  if (!$('#saveas-filepath').val()) return false;
  var id = $('#saveas-filepath').data('cwd');
  id += id === '/'
    ? $('#saveas-filepath').val()
    : '/' + $('#saveas-filepath').val();
  this.model.set({id:id});
  this.save(null, {
    success: function() { window.location = '/project?id=' + id; },
    error: _(this.error).bind(this)
  });
  return false;
};
Editor.prototype.refresh = function(ev) {
  this.errorClear();

  // Refresh map layer.
  var layer = map.getLayerAt(0);
  map.removeLayer(layer);
  layer.destroy();
  map.addLayer(mapbox.layer().tilejson({ tiles:['/project/{z}/{x}/{y}.png?id=<%=project.id%>&mtime=' + this.model.get('mtime') ] }));

  // Set canvas background color.
  if (this.model.get('background'))
    $('#map').css({'background-color':this.model.get('background')});

  // Refresh map title.
  $('title').text(this.model.get('name'));
  $('#title h3').text(this.model.get('name'));

  // Refresh map zoom range.
  map.setZoomRange(this.model.get('minzoom'),this.model.get('maxzoom'));
  return false;
};
Editor.prototype.browse = function(ev) {
  var browse = $(ev.currentTarget).parents('.browse');
  var cwd = $(ev.currentTarget).attr('href').split('#').pop();
  $.ajax({
    url: '/browse/' + $(browse).attr('id') + cwd,
    dataType: 'json',
    success: function(resp) {
      $('input[type=text]', browse).data('cwd', cwd);
      $('.cwd strong', browse).text(cwd);
      $('.cwd a', browse).attr('href', '#' + cwd.split('/').slice(0,-1).join('/'));
      $('.dir', browse).html(resp.map(function(f) {
        return "<a class='icon folder padded' href='#" + f.path + "'>" + f.basename + "</a>";
      }).join('\n'));
    },
    // @TODO
    error: function(resp) {}
  });
  return false;
};

new Editor({
  el: document.body,
  model: new Project(<%= JSON.stringify(project) %>)
});

// Syntax highlighting for carto ref.
$('pre.carto-snippet').each(function(i, elem) {
  var text = $(elem).text();
  $(elem).empty();
  CodeMirror.runMode(text, {name:'carto',reference:window.cartoRef}, $(elem).get(0));
});
</script>
</body>

</html>
