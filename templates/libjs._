window.cartoRef = <%=JSON.stringify(cartoRef)%>;

var addMapBox = function(ev) {
  var attr = _($('#addmapbox').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = field.value;
    return memo;
  }, {});
  window.location.href = '/source?id=mapbox:///' + attr.id;
  return false;
};

var tabbedHandler = function(ev) {
  var target = ev.currentTarget.href.split('#').pop();
  var context = target.split('-').slice(0,-1).join('-');
  $('#' + context + ' .active').removeClass('active');
  $(ev.currentTarget).addClass('active');
  $('#' + target).addClass('active');
  return false;
};

var rangeHandler = function(el, bound, target) {
  var limit = parseInt($(target).val(),10);
  if (bound === 'max') {
    el.value = parseInt(el.value, 10) < limit ? el.value : limit;
  } else if (bound === 'min') {
    el.value = parseInt(el.value, 10) > limit ? el.value : limit;
  }
  $('#' + el.id + '-val').text(el.value);
};

var errorHandler = _(function() {
  if (document.cookie.indexOf('errors') === -1) return;
  var html = document.cookie
    .split('errors=').pop()
    .split(';')
    .shift()
    .split('|')
    .filter(function(msg) { return msg })
    .map(function(msg) {
      return "<div class='msg'>" + decodeURIComponent(msg) + "</div>";
    });
  $('#map-errors').html(html);
}).throttle(50);

var statHandler = function(key) {
  var unit = (function() {
    if (key === 'srcbytes') return 'k';
    if (key === 'drawtime') return 'ms';
    if (key === 'coordDistance') return 'm';
    return '';
  })();

  var byLayer = key !== 'srcbytes' && key !== 'drawtime';

  return _(function() {
    if (document.cookie.indexOf(key) === -1) return;
    
    var stats = _(document.cookie
      .split(key + '=').pop()
      .split(';').shift()
      .split('.'))
      .reduce(function(memo, stat) {
        stat = stat.split('-');
        if (stat.length < 4) return memo;

        var z = stat.shift();
        var layer = byLayer ? stat.shift() : null;
        var min = parseInt(stat.shift(), 10);
        var avg = parseInt(stat.shift(), 10);
        var max = parseInt(stat.shift(), 10);

        if (!byLayer) {
          memo[z] = [min, avg, max];
          return memo;
        }

        var thisZoom = memo[z] = memo[z] || {};
        thisZoom[layer] = [min, avg, max];
        return memo;
      }, {});

    var html = "<a href='#' class='button icon close'></a>";
    
    var maxWidth = _(stats).reduce(function(memo, v, k) {
      return Math.max(memo, v[2]);
    }, 0);

    for (var z = 0; z < 22; z++) {
      var s = stats[z];
      if (key === 'srcbytes' && s) {
        s = s.map(function(v) { return Math.round(v * 0.001) });
      }

      if (byLayer && s) s = s.water;

      var l = s ? Math.round(Math.min(s[0],maxWidth)/maxWidth*100) : null;
      var w = s ? Math.round((s[2]-s[0])/maxWidth*100) : null;
      var a = s ? Math.round(Math.min(s[1],maxWidth)/maxWidth*100) : null;

      statHtml = [
        "<a href='#zoomedto' class='z z",z,"'>",
        "<strong>z",z,"</strong>"
      ];
      if (!byLayer) {
        statHtml = statHtml.concat([
          s ? "<span class='avg'>"+s[1]+unit+"</span>" : '',
          s ? "<span class='range'>" : '',
          s ? "<span class='minmax' style='margin-left:"+l+"%; width:"+w+"%;'></span>" : '',
          s ? "<span class='marker' style='margin-left:"+a+"%'></span>" : '',
          s ? "</span>" : '',
        ]);
      } else {

        statHtml = statHtml.concat([
          s ? "<span class='avg'>avg: "+s[1]+unit+"</span>": '',
          s ? "<span class='max'>max: "+s[2]+unit+"</span>": '',
        ]);
      }
      
      statHtml.push("</a>");
      html += statHtml.join('');
    }
    $('#zoomedto').html(html);
  }).throttle(50);
};

var views = {};

views.Browser = Backbone.View.extend({});
views.Browser.prototype.events = {
  'click .cwd a': 'browse',
  'click .list a': 'browse',
  'submit': 'submit'
};
views.Browser.prototype.initialize = function(options) {
  this.callback = options.callback || function() {};
  this.filter = options.filter || function(f) { return true };
  this.isFile = options.isFile || function() {};
  this.cwd = this.$('input[name=cwd]').val();
  return this.render();
};
views.Browser.prototype.render = function() {
  var view = this;
  $.ajax({
    url: '/browse/' + view.cwd,
    dataType: 'json',
    success: function(resp) {
      view.$('input[name=cwd]').val(view.cwd);
      view.$('.cwd strong').text(view.cwd);
      view.$('.cwd a').attr('href', '#' + view.cwd.split('/').slice(0,-1).join('/'));
      view.$('.list').html(_(resp).chain()
        .filter(view.filter)
        .map(function(f) {
          return "<a class='icon " + f.type + " padded' href='#" + f.path + "'>" + f.basename + "</a>";
        })
        .value()
        .join('\n'));
    },
    // @TODO
    error: function(resp) {}
  });
};
views.Browser.prototype.submit = function(ev) {
  // Grab settings form values.
  var values = _($(this.el).serializeArray()).reduce(function(memo, field) {
    if (field.name && field.value) {
      memo[field.name] = field.value;
    }
    return memo;
  }, {});
  if (!values.basename) return false;
  if (!this.callback) return false;
  this.callback(null, values.basename[0] === '/'
    ? values.basename
    : values.cwd + '/' + values.basename);
  return false;
};
views.Browser.prototype.browse = function(ev) {
  var target = $(ev.currentTarget);
  if (target.is('.file') || this.isFile(target.attr('href').split('#').pop())) {
    this.$('input[name=basename]').val(target.text());
  } else if (target.is('.dir') || target.is('.prev')) {
    this.cwd = target.attr('href').split('#').pop();
    this.render();
  }
  return false;
};
