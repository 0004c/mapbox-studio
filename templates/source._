<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/ext/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/app/base.css' rel='stylesheet' />
  <link href='/app/source.css' rel='stylesheet' />
  <title><%= source.name %></title>
</head>

<body id='view' class='dark'>

<div id='perf'></div>

<div id='full' class='column dark w2 l0'>
  <div id='title' class='dark'>
    <div class='left'>
      <% if (source._tmp) { %>
      <a class='button icon okay' href='#saveas'>Save as</a>
      <% } else { %>
      <a class='button icon okay save' href='#'>Save</a>
      <% } %>
    </div>
    <h3>
      <span class='name'><%= source.name || 'Untitled' %></span>
      <a class='icon gear' href='#settings'></a>
    </h3>
  </div>
  <div id='map' class='dark' style='background-color:<%=source.background%>;'></div>
  <div id='map-overlay'></div>
  <div id='zoomedto' class='dark z<%=source._prefs.center[2]%>'></div>
</div>

<div id='layers' class='menu column dark w2 l2'>
  <nav class='menu-title centered'>
    <a href='#addlayer' class='button icon plus title'>Layers</a>
  </nav>
  <div class='menu-content'>
  <% _(source.Layer).each(function(l) { print(this.layeritem(l)) }.bind(this)); %>
  </div>
</div>
<div id='editor'>
<% _(source.Layer).each(function(l) {
  var type = l.Datasource.type;
  if (this['layer' + type]) print(this['layer' + type](l))
}.bind(this)); %>
</div>
<form id='settings' class='pane dark w2 l2'>
  <a class='button icon close' href='#'></a>
  <section>
    <h2>Settings</h2>
  </section>
  <section>
    <label class='inline'>Name</label>
    <input class='stretch' name='name' type='text' value='<%= _(source.name).escape() %>'/>
  </section>
  <section>
    <label class='inline'>Description</label>
    <textarea class='stretch' name='description' type='text' cols='60' rows='8'><%= source.description %></textarea>
  </section>
  <section>
    <label class='inline'>Attribution</label>
    <input class='stretch' name='attribution' type='text' value='<%= _(source.attribution).escape() %>'></textarea>
  </section>
  <section>
    <label class='inline'>Minzoom</label>
    <input id='minzoom' name='minzoom' class='min' type='range' value='<%= source.minzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "max", "#maxzoom");' />
    <label class='range' id='minzoom-val'><%= source.minzoom %></label>
  </section>
  <section>
    <label class='inline'>Maxzoom</label>
    <input id='maxzoom' name='maxzoom' class='max' type='range' value='<%= source.maxzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "min", "#minzoom");' />
    <label class='range' id='maxzoom-val'><%= source.maxzoom %></label>
  </section>
</form>

<div id='message' class='modal dark centered'>
  <a class='button icon close' href='#'></a>
  <div class='message'></div>
</div>

<form id='addlayer' class='modal dark centered'>
  <a class='button icon close' href='#'></a>
  <p class='joined'>
    <input type='text' placeholder='layername' size='20' name='id' pattern='\w+'/><!--
    --><select name='type'>
      <option value='postgis'>postgis</option>
      <option value='shape'>shapefile</option>
      <option value='geojson' disabled='disabled'>geojson</option>
      <option value='sqlite' disabled='disabled'>sqlite</option>
      <option value='csv' disabled='disabled'>csv</option>
    </select>
  </p>
  <input type='submit' value='New layer'/>
</form>

<div id='mask'></div>

<script src='/ext/underscore-min.js'></script>
<script src='/ext/codemirror.js'></script>
<script src='/ext/codemirror.runmode.js'></script>
<script src='/ext/codemirror.sql.js'></script>
<script src='/ext/zepto.js'></script>
<script src='/ext/backbone.js'></script>
<script src='/ext/mapbox.js'></script>
<script src='/app/lib.js'></script>

<script>
var map = L.mapbox.map('map');
var tiles = L.mapbox.tileLayer({
  tiles: ['/project/{z}/{x}/{y}.png?id=<%=source.id%>&mtime=<%=source.mtime%>'],
  minzoom: <%= source.minzoom %>,
  maxzoom: <%= source.maxzoom %>
})
.on('tileload', statHandler('srcbytes'))
.addTo(map);

statHandler('srcbytes')();

map.setView([<%=source._prefs.center[1]%>, <%=source._prefs.center[0]%>], <%=source._prefs.center[2]%>);
map.on('zoomend', function() { $('#zoomedto').attr('class', 'z' + (map.getZoom()|0)); });
map.options.minZoom = <%= source.minzoom %>;
map.options.maxZoom = <%= source.maxzoom %>;

var Layer = function(id, datasource) {
  var code;
  if (datasource.type === 'postgis') {
    code = CodeMirror(document.getElementById('layers-' + id + '-sql'), {
      value: datasource.table,
      lineNumbers: true,
      mode: 'text/x-plsql'
    });
    code.getWrapperElement().id = 'layers-' + id + '-sql-code';
  }
  var layer = { code: code, form: $('#layers-' + id) };
  layer.get = function() {
    var attr = _($('#layers-' + id).serializeArray()).reduce(function(memo, field) {
      var group = field.name.split('-')[0];
      var name = field.name.split('-').slice(1).join('-');
      switch (group) {
      case 'properties':
        memo.properties = memo.properties || {};
        memo.properties[name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      case 'Datasource':
        memo.Datasource = memo.Datasource || {};
        memo.Datasource[name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      default:
        memo[field.name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      }
      return memo;
    }, {});
    if (code) {
      attr.Datasource = attr.Datasource || {};
      attr.Datasource.table = code.getValue();
    }
    return attr;
  };
  return layer;
};
var layers = _(<%=JSON.stringify(source.Layer)%>).reduce(function(memo, l) {
  memo[l.id] = Layer(l.id, l.Datasource);
  return memo;
}, {});

var Source = Backbone.Model.extend({});
Source.prototype.url = function() { return '/source?id=' + this.get('id'); };

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click a.button.save': 'save',
  'submit #addlayer': 'addlayer',
  'keydown': 'keys'
};
Editor.prototype.keys = function(ev) {
  // Escape. Collapses windows, dialogs, modals, etc.
  if (ev.which === 27) {
    window.location.href = '#';
  }
  if ((!ev.ctrlKey && !ev.metaKey) || ev.altKey || ev.shiftKey) return;
  switch (ev.which) {
  case 83: // s
    this.save();
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.addlayer = function(ev) {
  var values = _($('#addlayer').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = field.value;
    return memo;
  }, {});

  if (!values.id || !templates['layer' + values.type]) return false;

  if (!layers[values.id]) {
    var layer = {
      id: values.id,
      properties: {
        minzoom:0,
        maxzoom:22,
        'buffer-size':0
      },
      Datasource: {
        type: values.type
      }
    };
    $('#editor').prepend(templates['layer' + values.type](layer));
    $('#layers .menu-content').prepend(templates['layeritem'](layer));
    layers[values.id] = Layer(values.id, layer.Datasource);

    window.location.hash = '#layers-' + values.id;
  } else {
    window.location.hash = '#';
  }
  return false;
};
Editor.prototype.error = function(model, resp) {
  this.messageClear();

  if (!resp.responseText)
    return this.messageModal('Could not save project "' + model.id + '"');

    // Assume carto.js specific error array format response.
  _(JSON.parse(resp.responseText).message.toString().split('\n')).chain()
    .compact()
    .map(function(e) { return e.match(/^(Error: )?([\w.]+):([\d]+):([\d]+) (.*)$/) || e; })
    .each(_(function(e) {
      if (_(e).isArray()) {
        var id = e[2];
        var ln = parseInt(e[3]) - 1;
        code[id]._cartoErrors = code[id]._cartoErrors || [];
        code[id]._cartoErrors.push(ln);
        code[id].setMarker(ln, "<a id='error-"+ln+"' href='#error-"+ln+"'>%N%</a><span class='message'><a href='#' class='icon'>âœ•</a>"+e[5]+"</span>", 'error');
      } else {
        return this.messageModal(e);
      }
    }).bind(this));
};
Editor.prototype.messageModal = function(text) {
  $('#message .message').text(text);
  window.location.hash = '#message';
};
Editor.prototype.messageClear = function() {
  $('#message .message').text('');
  $('#full').removeClass('loading');
};
Editor.prototype.save = function(ev, options) {
  // Set map in loading state.
  $('#full').addClass('loading');

  // Grab settings form values.
  var attr = _($('#settings').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
    return memo;
  }, {});

  // Grab layers.
  attr.Layer = _(layers).map(function(l) { return l.get() });

  // if (this.model.get('_prefs').saveCenter) {
  //   var lon = map.getCenter().lng % 360;
  //   lon += (lon < -180) ? 360 : (lon > 180) ? -360 : 0;
  //   attr.center = [lon , map.getCenter().lat, map.getZoom() ];
  // }

  options = options || {
    success:_(this.refresh).bind(this),
    error: _(this.error).bind(this)
  };
  this.model.save(attr, options);

  return false;
};
Editor.prototype.refresh = function(ev) {
  this.messageClear();

  // Refresh map layer.
  map.removeLayer(tiles);
  tiles = L.mapbox.tileLayer({
    tiles: ['/project/{z}/{x}/{y}.png?id=<%=source.id%>&mtime=' + this.model.get('mtime') ],
    minzoom: this.model.get('minzoom'),
    maxzoom: this.model.get('maxzoom')
  })
  .on('tileload', statHandler('srcbytes'))
  .addTo(map);
  map.options.minZoom = this.model.get('minzoom');
  map.options.maxZoom = this.model.get('maxzoom');

  // Refresh map title.
  $('title').text(this.model.get('name'));
  $('#title .name').text(this.model.get('name') || 'Untitled');

  return false;
};
new Editor({
  el: document.body,
  model: new Source(<%= JSON.stringify(source) %>)
});

var templates = {};
templates.layeritem = <%= this.layeritem.source %>;
templates.layershape = <%= this.layershape.source %>;
templates.layerpostgis = <%= this.layerpostgis.source %>;
</script>
</body>

</html>
